// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AirbnbDBContext))]
    [Migration("20250428092908_last")]
    partial class last
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.AdditionalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Data")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.HasKey("Id")
                        .HasName("PK__Additio__3214EC07F0A1500F");

                    b.HasIndex("ListingId");

                    b.ToTable("AdditionalInformation");
                });

            modelBuilder.Entity("WebApplication1.Models.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Amenitie__3214EC07787697E8");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Name" }, "UQ__Amenitie__72E12F1B86B281BB")
                        .IsUnique();

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("WebApplication1.Models.AmenityCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_AmenityCategory");

                    b.ToTable("AmenityCategory");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("currencyId");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstName");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isAdmin");

                    b.Property<bool?>("IsHost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isHost");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isVerified");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLogin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("en")
                        .HasColumnName("preferredLanguage");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profilePictureURL");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VerificationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("verificationStatusId");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07CF81F701");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Users__4849DA01544ADDB8")
                        .IsUnique()
                        .HasFilter("[phoneNumber] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164CADE8B40")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.AvailabilityCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("isAvailable");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("specialPrice");

                    b.HasKey("Id")
                        .HasName("PK__Availabi__3214EC076FC3A8E2");

                    b.HasIndex(new[] { "ListingId", "Date" }, "UX_Calendar")
                        .IsUnique();

                    b.ToTable("AvailabilityCalendar", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("bookingDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellationReason");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date")
                        .HasColumnName("checkInDate");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date")
                        .HasColumnName("checkOutDate");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guestId");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int")
                        .HasColumnName("guestsCount");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<string>("PaymentIntentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paymentIntentId");

                    b.Property<DateTime>("PaymentTimeOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("paymentTimeOut")
                        .HasDefaultValueSql("DATEADD(MINUTE, 15, GETDATE())");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("specialRequests");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id")
                        .HasName("PK__Bookings__3214EC07AB24997F");

                    b.HasIndex(new[] { "ListingId", "CheckInDate", "CheckOutDate" }, "IX_Bookings_DateRange");

                    b.HasIndex(new[] { "GuestId" }, "IX_Bookings_GuestId");

                    b.HasIndex(new[] { "Status" }, "IX_Bookings_Status");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.CancellationPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("FullRefundDays")
                        .HasColumnType("int")
                        .HasColumnName("fullRefundDays");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("PartialRefundDays")
                        .HasColumnType("int")
                        .HasColumnName("partialRefundDays");

                    b.Property<decimal?>("PartialRefundPercentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("partialRefundPercentage");

                    b.HasKey("Id")
                        .HasName("PK__Cancella__3214EC07F9731500");

                    b.ToTable("CancellationPolicies");
                });

            modelBuilder.Entity("WebApplication1.Models.ChatBot.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFromUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("WebApplication1.Models.ChatBot.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WebApplication1.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("PK__Currenci__3214EC07C2D97148");

                    b.HasIndex(new[] { "Code" }, "UQ__Currenci__357D4CF90BB6C97F")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WebApplication1.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("addressLine1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("addressLine2");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("averageRating");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int")
                        .HasColumnName("bathrooms");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int")
                        .HasColumnName("bedrooms");

                    b.Property<int?>("CancellationPolicyId")
                        .HasColumnType("int")
                        .HasColumnName("cancellationPolicyId");

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("currencyId");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("hostId");

                    b.Property<bool?>("InstantBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("instantBooking");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isActive");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("longitude");

                    b.Property<int>("MaxNights")
                        .HasColumnType("int")
                        .HasColumnName("maxNights");

                    b.Property<int>("MinNights")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("minNights");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postalCode");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("pricePerNight");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("propertyTypeId");

                    b.Property<int?>("ReviewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("reviewCount");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasColumnName("roomTypeId");

                    b.Property<decimal?>("SecurityDeposit")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("securityDeposit");

                    b.Property<decimal?>("ServiceFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("serviceFee");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<int>("VerificationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("verificationStatusId");

                    b.HasKey("Id")
                        .HasName("PK__Listings__3214EC0736988D9A");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex(new[] { "Capacity" }, "IX_Listings_Capacity");

                    b.HasIndex(new[] { "HostId" }, "IX_Listings_HostId");

                    b.HasIndex(new[] { "City", "State", "Country" }, "IX_Listings_Location");

                    b.HasIndex(new[] { "PricePerNight" }, "IX_Listings_Price");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("WebApplication1.Models.ListingAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("amenityId");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__ListingA__3214EC074C630FAB");

                    b.HasIndex("AmenityId");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingAmenities");
                });

            modelBuilder.Entity("WebApplication1.Models.ListingPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caption");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("displayOrder");

                    b.Property<bool?>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isPrimary");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("uploadedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PK__ListingP__3214EC078C970EA8");

                    b.HasIndex(new[] { "ListingId" }, "UX_Listing_Photos_Primary")
                        .IsUnique()
                        .HasFilter("([isPrimary]=(1))");

                    b.ToTable("ListingPhotos");
                });

            modelBuilder.Entity("WebApplication1.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isRead");

                    b.Property<Guid?>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipientId");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("senderId");

                    b.Property<DateTime?>("SentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sentTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Messages__3214EC077DF3B4BD");

                    b.HasIndex("ListingId");

                    b.HasIndex("RecipientId");

                    b.HasIndex(new[] { "SenderId", "RecipientId" }, "IX_Messages_SenderRecipient");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingId");

                    b.Property<int?>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("currencyId");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("failureReason");

                    b.Property<bool>("IsSecurityDepositRefunded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("paymentDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("AllNow")
                        .HasColumnName("paymentType");

                    b.Property<DateTime?>("ProccessedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("receiptUrl");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transactionId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC074C3E3A00");

                    b.HasIndex("BookingId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("stripeCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stripeCode");

                    b.Property<string>("stripeId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stripeId");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07982F688D");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("WebApplication1.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon");

                    b.Property<string>("PropertyTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("propertyTypeName");

                    b.HasKey("Id")
                        .HasName("PK__Property__3214EC07238ECA57");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("AccuracyRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("accuracyRating");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingId");

                    b.Property<decimal>("CheckInRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("checkInRating");

                    b.Property<decimal>("CleanlinessRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("cleanlinessRating");

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comment");

                    b.Property<decimal>("CommunicationRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("communicationRating");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("hostId");

                    b.Property<string>("HostReply")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("hostReply");

                    b.Property<DateTime?>("HostReplyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hostReplyDate");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<decimal>("LocationRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("locationRating");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reviewerId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<decimal>("ValueRating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("valueRating");

                    b.HasKey("Id")
                        .HasName("PK__Reviews__3214EC07F0A1500F");

                    b.HasIndex("HostId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex(new[] { "ListingId" }, "IX_Reviews_ListingId");

                    b.HasIndex(new[] { "BookingId", "ReviewerId" }, "UQ_ReviewBooking")
                        .IsUnique();

                    b.HasIndex(new[] { "BookingId", "ReviewerId" }, "UX_ReviewBooking")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_AccuracyRating", "[accuracyRating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_CheckInRating", "[checkInRating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_CleanlinessRating", "[cleanlinessRating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_CommunicationRating", "[communicationRating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_LocationRating", "[locationRating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_Rating", "[rating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Review_ValueRating", "[valueRating] BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("roomTypeName");

                    b.HasKey("Id")
                        .HasName("PK__RoomType__3214EC0769FE7197");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.VerificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__Verifica__3214EC0713125C7D");

                    b.ToTable("VerificationStatus", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isPublic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Wishlist__3214EC075E6F8444");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.WishlistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("addedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listingId");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("wishlistId");

                    b.HasKey("Id")
                        .HasName("PK__Wishlist__3214EC07B48E1F30");

                    b.HasIndex("ListingId");

                    b.HasIndex(new[] { "WishlistId", "ListingId" }, "IX_WishlistItems_Lookup");

                    b.HasIndex(new[] { "WishlistId", "ListingId" }, "UQ_WishlistItem")
                        .IsUnique();

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.AdditionalInformation", b =>
                {
                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("AdditionalInformation")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Additiona__listi__7D439ABD");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("WebApplication1.Models.Amenity", b =>
                {
                    b.HasOne("WebApplication1.Models.AmenityCategory", "Category")
                        .WithMany("Amenities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Amenities__categ__6A30C649");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebApplication1.Models.Currency", "Currency")
                        .WithMany("Users")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK__Users__currencyI__4CA06362");

                    b.HasOne("WebApplication1.Models.VerificationStatus", "VerificationStatus")
                        .WithMany("Users")
                        .HasForeignKey("VerificationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__verificat__4BAC3F29");

                    b.Navigation("Currency");

                    b.Navigation("VerificationStatus");
                });

            modelBuilder.Entity("WebApplication1.Models.AvailabilityCalendar", b =>
                {
                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("AvailabilityCalendars")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Availabil__listi__07C12930");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__guestI__114A936A");

                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("Bookings")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__listin__123EB7A3");

                    b.Navigation("Guest");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("WebApplication1.Models.ChatBot.ChatMessage", b =>
                {
                    b.HasOne("WebApplication1.Models.ChatBot.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.ChatBot.Conversation", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany("Conversations")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WebApplication1.Models.Listing", b =>
                {
                    b.HasOne("WebApplication1.Models.CancellationPolicy", "CancellationPolicy")
                        .WithMany("Listings")
                        .HasForeignKey("CancellationPolicyId")
                        .HasConstraintName("FK__Listings__cancel__5CD6CB2B");

                    b.HasOne("WebApplication1.Models.Currency", "Currency")
                        .WithMany("Listings")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK__Listings__curren__5DCAEF64");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Host")
                        .WithMany("Listings")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Listings__hostId__59FA5E80");

                    b.HasOne("WebApplication1.Models.PropertyType", "PropertyType")
                        .WithMany("Listings")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Listings__proper__5AEE82B9");

                    b.HasOne("WebApplication1.Models.RoomType", "RoomType")
                        .WithMany("Listings")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Listings__roomTy__5BE2A6F2");

                    b.HasOne("WebApplication1.Models.VerificationStatus", "VerificationStatus")
                        .WithMany("Listings")
                        .HasForeignKey("VerificationStatusId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Listing__verificat__4BAC3F29");

                    b.Navigation("CancellationPolicy");

                    b.Navigation("Currency");

                    b.Navigation("Host");

                    b.Navigation("PropertyType");

                    b.Navigation("RoomType");

                    b.Navigation("VerificationStatus");
                });

            modelBuilder.Entity("WebApplication1.Models.ListingAmenity", b =>
                {
                    b.HasOne("WebApplication1.Models.Amenity", "Amenity")
                        .WithMany("ListingAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ListingAm__ameni__6D0D32F4");

                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("ListingAmenities")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ListingAm__Listi__6E01572D");

                    b.Navigation("Amenity");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("WebApplication1.Models.ListingPhoto", b =>
                {
                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("ListingPhotos")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ListingPhotos_Listing");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("WebApplication1.Models.Message", b =>
                {
                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("Messages")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Messages__listin__75A278F5");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Recipient")
                        .WithMany("MessageRecipients")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__recipi__74AE54BC");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__sender__73BA3083");

                    b.Navigation("Listing");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.HasOne("WebApplication1.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__booking__1F98B2C1");

                    b.HasOne("WebApplication1.Models.Currency", "Currency")
                        .WithMany("Payments")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK__Payment__currenc__22751F6C");

                    b.HasOne("WebApplication1.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__payment__2180FB33");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Payment__userId__208CD6FA");

                    b.Navigation("Booking");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Review", b =>
                {
                    b.HasOne("WebApplication1.Models.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__booking__2FCF1A8A");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Host")
                        .WithMany("ReviewHosts")
                        .HasForeignKey("HostId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__hostId__31B762FC");

                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("Reviews")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__listing__32AB8735");

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Reviewer")
                        .WithMany("ReviewReviewers")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__reviewe__30C33EC3");

                    b.Navigation("Booking");

                    b.Navigation("Host");

                    b.Navigation("Listing");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebApplication1.Models.Wishlist", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("WebApplication1.Models.Wishlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Wishlist__userId__7B5B524B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.WishlistItem", b =>
                {
                    b.HasOne("WebApplication1.Models.Listing", "Listing")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__WishlistI__listi__02084FDA");

                    b.HasOne("WebApplication1.Models.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__WishlistI__wishl__01142BA1");

                    b.Navigation("Listing");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("WebApplication1.Models.Amenity", b =>
                {
                    b.Navigation("ListingAmenities");
                });

            modelBuilder.Entity("WebApplication1.Models.AmenityCategory", b =>
                {
                    b.Navigation("Amenities");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Conversations");

                    b.Navigation("Listings");

                    b.Navigation("MessageRecipients");

                    b.Navigation("MessageSenders");

                    b.Navigation("Payments");

                    b.Navigation("ReviewHosts");

                    b.Navigation("ReviewReviewers");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication1.Models.CancellationPolicy", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("WebApplication1.Models.ChatBot.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApplication1.Models.Currency", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Listing", b =>
                {
                    b.Navigation("AdditionalInformation");

                    b.Navigation("AvailabilityCalendars");

                    b.Navigation("Bookings");

                    b.Navigation("ListingAmenities");

                    b.Navigation("ListingPhotos");

                    b.Navigation("Messages");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("WebApplication1.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WebApplication1.Models.PropertyType", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("WebApplication1.Models.RoomType", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("WebApplication1.Models.VerificationStatus", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
